"use client";
import React, { useState, useCallback } from "react";
import { FaCopy, FaSync, FaDownload } from "react-icons/fa";

const XSSVulnerabilityTester = () => {
  const [input, setInput] = useState("");
  const [results, setResults] = useState(null);
  const [error, setError] = useState("");
  const [mode, setMode] = useState("basic"); // Basic or Advanced mode
  const [customPatterns, setCustomPatterns] = useState(""); // For user-defined patterns

  // XSS patterns with additional vectors
  const xssPatterns = [
    { pattern: /<script\b[^>]*>([\s\S]*?)<\/script>/i, description: "Script Tag Injection", severity: "High" },
    { pattern: /javascript:/i, description: "JavaScript Protocol in Attribute", severity: "Medium" },
    { pattern: /on\w+\s*=\s*["'][^"']*["']/i, description: "Event Handler Injection", severity: "High" },
    { pattern: /<img\b[^>]*src=["']javascript:[^"']*["']/i, description: "Image with JavaScript SRC", severity: "High" },
    { pattern: /<iframe\b[^>]*>/i, description: "Iframe Injection", severity: "Medium" },
    { pattern: /eval\s*\(/i, description: "Eval Function Usage", severity: "High" },
    { pattern: /alert\s*\(/i, description: "Alert Function Call", severity: "High" },
    { pattern: /document\.cookie/i, description: "Cookie Access Attempt", severity: "Medium" },
    { pattern: /<[^>]+>/i, description: "HTML Tag (Potential Vector)", severity: "Low" },
    { pattern: /data:[^;]*;base64/i, description: "Base64 Data URI", severity: "Medium" },
    { pattern: /window\.location/i, description: "Location Manipulation", severity: "Medium" },
    { pattern: /<svg\b[^>]*>/i, description: "SVG Injection", severity: "High" },
  ];

  // Test for XSS vulnerabilities
  const testXSS = useCallback(() => {
    setError("");
    setResults(null);

    if (!input.trim()) {
      setError("Please enter text to test for XSS vulnerabilities");
      return;
    }

    let patternsToTest = [...xssPatterns];
    if (mode === "advanced" && customPatterns) {
      try {
        const custom = customPatterns.split("\n").map((line) => {
          const [regex, desc] = line.split("|");
          return { pattern: new RegExp(regex, "i"), description: desc || "Custom Pattern", severity: "Medium" };
        });
        patternsToTest = [...patternsToTest, ...custom];
      } catch (e) {
        setError("Invalid custom pattern format. Use: regex|description per line");
        return;
      }
    }

    const vulnerabilities = [];
    patternsToTest.forEach(({ pattern, description, severity }) => {
      if (pattern.test(input)) {
        const matches = input.match(pattern);
        vulnerabilities.push({
          description,
          severity,
          matches: matches ? matches.slice(0, 5) : ["Detected"],
        });
      }
    });

    const sanitized = input
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#x27;");
    const wouldExecute = vulnerabilities.length > 0 && input === sanitized ? false : vulnerabilities.length > 0;

    setResults({
      input,
      vulnerabilities,
      wouldExecute,
      sanitized,
      mode,
    });
  }, [input, mode, customPatterns]);

  // Handle form submission
  const handleSubmit = (e) => {
    e.preventDefault();
    testXSS();
  };

  // Copy results to clipboard
  const copyToClipboard = () => {
    if (results) {
      const text = JSON.stringify(results, null, 2);
      navigator.clipboard.writeText(text);
    }
  };

  // Download results as JSON
  const downloadResults = () => {
    if (results) {
      const blob = new Blob([JSON.stringify(results, null, 2)], { type: "application/json" });
      const url = URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = url;
      link.download = `xss-test-results-${Date.now()}.json`;
      link.click();
      URL.revokeObjectURL(url);
    }
  };

  // Clear all
  const clearAll = () => {
    setInput("");
    setResults(null);
    setError("");
    setCustomPatterns("");
    setMode("basic");
  };

  return (
    <div className="min-h-screen  flex items-center justify-center ">
      <div className="w-full  bg-white rounded-xl shadow-lg p-6 sm:p-8">
        <h1 className="text-2xl sm:text-3xl font-bold text-gray-800 mb-6 text-center">
          XSS Vulnerability Tester Simulator
        </h1>

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Input */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Input Text</label>
            <textarea
              value={input}
              onChange={(e) => setInput(e.target.value)}
              className="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 font-mono text-sm h-40"
              placeholder="Enter text, HTML, or script to test (e.g., <script>alert('XSS')</script>)"
            />
          </div>

          {/* Mode Selection */}
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Test Mode</label>
              <select
                value={mode}
                onChange={(e) => setMode(e.target.value)}
                className="w-full p-2 border rounded-md focus:ring-2 focus:ring-blue-500"
              >
                <option value="basic">Basic (Common Patterns)</option>
                <option value="advanced">Advanced (Custom Patterns)</option>
              </select>
            </div>
            {mode === "advanced" && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Custom Patterns (regex|description)
                </label>
                <textarea
                  value={customPatterns}
                  onChange={(e) => setCustomPatterns(e.target.value)}
                  className="w-full p-2 border rounded-md focus:ring-2 focus:ring-blue-500 font-mono text-sm h-24"
                  placeholder="e.g., \nexpression\\s*\\(|Dynamic Expression\nvbscript:|VBScript Protocol"
                />
              </div>
            )}
          </div>

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-4">
            <button
              type="submit"
              className="flex-1 py-2 px-4 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
            >
              Test for XSS
            </button>
            <button
              type="button"
              onClick={clearAll}
              className="flex-1 py-2 px-4 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors flex items-center justify-center"
            >
              <FaSync className="mr-2" /> Clear
            </button>
          </div>
        </form>

        {/* Error Message */}
        {error && (
          <div className="mt-4 p-3 bg-red-50 text-red-700 rounded-lg text-sm text-center">
            {error}
          </div>
        )}

        {/* Test Results */}
        {results && (
          <div className="mt-6">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-lg font-semibold text-gray-800">Test Results</h2>
              <div className="flex gap-2">
                <button
                  onClick={copyToClipboard}
                  className="flex items-center px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
                >
                  <FaCopy className="mr-2" /> Copy
                </button>
                <button
                  onClick={downloadResults}
                  className="flex items-center px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors"
                >
                  <FaDownload className="mr-2" /> Download
                </button>
              </div>
            </div>
            <div className="bg-gray-50 p-4 rounded-lg border space-y-4">
              <p className="text-sm">
                <strong>Input:</strong> <span className="font-mono">{results.input}</span>
              </p>
              <p
                className={`text-sm font-medium ${
                  results.wouldExecute ? "text-red-600" : "text-green-600"
                }`}
              >
                <strong>Would Execute:</strong>{" "}
                {results.wouldExecute ? "Yes (Potential XSS)" : "No (Likely Safe)"}
              </p>
              {results.vulnerabilities.length > 0 ? (
                <div>
                  <p className="text-sm font-medium">
                    Potential Vulnerabilities ({results.vulnerabilities.length}):
                  </p>
                  <ul className="mt-2 space-y-3 max-h-64 overflow-y-auto">
                    {results.vulnerabilities.map((vuln, index) => (
                      <li
                        key={index}
                        className="border p-3 rounded-lg bg-white shadow-sm"
                      >
                        <p
                          className={`font-medium ${
                            vuln.severity === "High"
                              ? "text-red-600"
                              : vuln.severity === "Medium"
                              ? "text-yellow-600"
                              : "text-gray-600"
                          }`}
                        >
                          {vuln.description} ({vuln.severity})
                        </p>
                        <p className="text-sm text-gray-600">
                          Matches: {vuln.matches.join(", ")}
                        </p>
                      </li>
                    ))}
                  </ul>
                </div>
              ) : (
                <p className="text-sm text-green-600">No obvious XSS vectors detected</p>
              )}
              <div>
                <p className="text-sm font-medium">Sanitized Output:</p>
                <textarea
                  value={results.sanitized}
                  readOnly
                  className="w-full p-2 border rounded-md bg-gray-100 h-24 font-mono text-sm"
                />
              </div>
            </div>
          </div>
        )}

        {/* Features */}
        <div className="mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
          <h3 className="font-semibold text-blue-700 mb-2">Features</h3>
          <ul className="list-disc list-inside text-blue-600 text-sm space-y-1">
            <li>Basic and Advanced modes with custom pattern support</li>
            <li>Detects common XSS vectors (scripts, event handlers, etc.)</li>
            <li>Copy results to clipboard or download as JSON</li>
            <li>Shows sanitized output preview</li>
            <li>Severity levels for vulnerabilities</li>
          </ul>
        </div>

        
      </div>
    </div>
  );
};

export default XSSVulnerabilityTester;