"use client";
import React, { useState, useCallback } from "react";
import { FaCopy, FaSync, FaSearch, FaDownload } from "react-icons/fa";
import html2canvas from "html2canvas"; // For downloading results

const VulnerabilityScanner = () => {
  const [input, setInput] = useState("");
  const [scanType, setScanType] = useState("url"); // url, text, code
  const [results, setResults] = useState(null);
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);
  const [severityFilter, setSeverityFilter] = useState("all"); // all, critical, high, medium, low
  const resultsRef = React.useRef(null);

  // Simulated vulnerability checks
  const scanUrl = useCallback(async (url) => {
    setLoading(true);
    const vulnerabilities = [];

    try {
      const urlPattern = /^(https?:\/\/)?([\w-]+\.)+[\w-]+(\/[\w- ./?%&=]*)?$/;
      if (!urlPattern.test(url)) throw new Error("Invalid URL format");

      const fullUrl = url.startsWith("http") ? url : `https://${url}`;
      const response = await fetch(
        `https://securityheaders.com/?q=${encodeURIComponent(fullUrl)}&followRedirects=true`,
        { headers: { Accept: "application/json" } }
      );

      if (!response.ok) {
        vulnerabilities.push({
          issue: "Unable to fetch site",
          severity: "Medium",
          details: "Could not access the URL",
        });
      } else {
        const headers = new Map();
        response.headers.forEach((value, key) => headers.set(key.toLowerCase(), value));

        if (!headers.has("content-security-policy"))
          vulnerabilities.push({
            issue: "Missing Content-Security-Policy",
            severity: "High",
            details: "No CSP header detected, increasing XSS risk",
          });
        if (!headers.has("strict-transport-security"))
          vulnerabilities.push({
            issue: "Missing HSTS",
            severity: "Medium",
            details: "No Strict-Transport-Security header, risking MITM attacks",
          });
        if (!headers.has("x-frame-options"))
          vulnerabilities.push({
            issue: "Missing X-Frame-Options",
            severity: "Medium",
            details: "No protection against clickjacking",
          });
        if (
          !headers.has("x-content-type-options") ||
          headers.get("x-content-type-options") !== "nosniff"
        )
          vulnerabilities.push({
            issue: "Missing or incorrect X-Content-Type-Options",
            severity: "Low",
            details: 'Should be set to "nosniff" to prevent MIME sniffing',
          });
      }

      if (!fullUrl.startsWith("https"))
        vulnerabilities.push({
          issue: "Non-HTTPS URL",
          severity: "High",
          details: "Using HTTP instead of HTTPS exposes data to interception",
        });
    } catch (err) {
      setError("Scan failed: " + err.message);
    }

    setLoading(false);
    return vulnerabilities;
  }, []);

  const scanText = (text) => {
    const vulnerabilities = [];

    if (/[<>&"']/.test(text))
      vulnerabilities.push({
        issue: "Potential XSS Vulnerability",
        severity: "High",
        details: "Detected characters (<, >, &, \", ') that could indicate XSS if not sanitized",
      });
    if (/\b\d{4}-\d{4}-\d{4}-\d{4}\b/.test(text))
      vulnerabilities.push({
        issue: "Credit Card Number Exposure",
        severity: "Critical",
        details: "Possible credit card number pattern detected",
      });
    if (/\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b/.test(text))
      vulnerabilities.push({
        issue: "Email Address Exposure",
        severity: "Medium",
        details: "Email address detected in plain text",
      });
    if (/\b(password|secret|key)\b/i.test(text))
      vulnerabilities.push({
        issue: "Sensitive Keyword Exposure",
        severity: "Medium",
        details: 'Keywords like "password", "secret", or "key" detected',
      });

    return vulnerabilities;
  };

  const scanCode = (code) => {
    const vulnerabilities = [];

    if (/eval\s*\(/.test(code))
      vulnerabilities.push({
        issue: "Use of eval()",
        severity: "High",
        details: "eval() can execute arbitrary code, posing a security risk",
      });
    if (/document\.write\s*\(/.test(code))
      vulnerabilities.push({
        issue: "Use of document.write()",
        severity: "Medium",
        details: "Can lead to XSS if not properly sanitized",
      });
    if (/innerHTML\s*=/.test(code))
      vulnerabilities.push({
        issue: "Unsafe innerHTML Assignment",
        severity: "High",
        details: "Direct DOM manipulation can introduce XSS vulnerabilities",
      });
    if (/setTimeout\s*\(\s*['"`]/.test(code))
      vulnerabilities.push({
        issue: "String in setTimeout",
        severity: "Medium",
        details: "Using strings in setTimeout can execute arbitrary code",
      });

    return vulnerabilities;
  };

  // Handle scan
  const handleScan = async (e) => {
    e.preventDefault();
    setError("");
    setResults(null);

    if (!input) {
      setError("Please enter something to scan");
      return;
    }

    let vulnerabilities = [];
    if (scanType === "url") vulnerabilities = await scanUrl(input);
    else if (scanType === "text") vulnerabilities = scanText(input);
    else vulnerabilities = scanCode(input);

    setResults({
      scanned: input,
      type: scanType,
      vulnerabilities,
      timestamp: new Date().toISOString(),
    });
  };

  // Copy results to clipboard
  const copyToClipboard = () => {
    if (results) {
      const text = JSON.stringify(results, null, 2);
      navigator.clipboard.writeText(text);
    }
  };

  // Download results as PNG
  const downloadResults = () => {
    if (resultsRef.current && results) {
      html2canvas(resultsRef.current).then((canvas) => {
        const link = document.createElement("a");
        link.download = `scan-results-${Date.now()}.png`;
        link.href = canvas.toDataURL("image/png");
        link.click();
      });
    }
  };

  // Clear all
  const clearAll = () => {
    setInput("");
    setResults(null);
    setError("");
    setSeverityFilter("all");
  };

  // Filter vulnerabilities by severity
  const filteredVulnerabilities = results?.vulnerabilities.filter((vuln) =>
    severityFilter === "all" ? true : vuln.severity.toLowerCase() === severityFilter
  );

  return (
    <div className="min-h-screen  flex items-center justify-center ">
      <div className="w-full  bg-white rounded-xl shadow-lg p-6 sm:p-8">
        <h1 className="text-2xl sm:text-3xl font-bold text-gray-800 mb-6 text-center">
          Vulnerability Scanner Simulator
        </h1>

        <form onSubmit={handleScan} className="space-y-6">
          {/* Scan Type Selection */}
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Scan Type</label>
              <select
                value={scanType}
                onChange={(e) => setScanType(e.target.value)}
                className="w-full p-2 border rounded-md focus:ring-2 focus:ring-blue-500"
              >
                <option value="url">URL</option>
                <option value="text">Text</option>
                <option value="code">Code</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Severity Filter
              </label>
              <select
                value={severityFilter}
                onChange={(e) => setSeverityFilter(e.target.value)}
                className="w-full p-2 border rounded-md focus:ring-2 focus:ring-blue-500"
                disabled={!results}
              >
                <option value="all">All</option>
                <option value="critical">Critical</option>
                <option value="high">High</option>
                <option value="medium">Medium</option>
                <option value="low">Low</option>
              </select>
            </div>
          </div>

          {/* Input */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              {scanType === "url"
                ? "URL to Scan"
                : scanType === "text"
                ? "Text to Scan"
                : "Code to Scan"}
            </label>
            <textarea
              value={input}
              onChange={(e) => setInput(e.target.value)}
              className="w-full p-2 border rounded-md focus:ring-2 focus:ring-blue-500 h-32 resize-y"
              placeholder={
                scanType === "url"
                  ? "Enter URL (e.g., example.com)"
                  : scanType === "text"
                  ? "Enter text to analyze"
                  : "Enter code snippet to scan"
              }
            />
          </div>

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-4">
            <button
              type="submit"
              disabled={loading}
              className="flex-1 py-2 px-4 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors flex items-center justify-center"
            >
              <FaSearch className="mr-2" />
              {loading ? "Scanning..." : "Scan"}
            </button>
            <button
              type="button"
              onClick={clearAll}
              className="flex-1 py-2 px-4 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors flex items-center justify-center"
            >
              <FaSync className="mr-2" /> Clear
            </button>
          </div>
        </form>

        {/* Error Message */}
        {error && (
          <div className="mt-4 p-4 bg-red-50 rounded-lg border border-red-200 text-red-700 text-sm">
            {error}
          </div>
        )}

        {/* Scan Results */}
        {results && (
          <div ref={resultsRef} className="mt-6">
            <div className="flex flex-col sm:flex-row justify-between items-center mb-4">
              <h2 className="text-lg font-semibold text-gray-800">Scan Results</h2>
              <div className="flex gap-2 mt-2 sm:mt-0">
                <button
                  onClick={copyToClipboard}
                  className="py-2 px-4 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors flex items-center"
                >
                  <FaCopy className="mr-2" /> Copy
                </button>
                <button
                  onClick={downloadResults}
                  className="py-2 px-4 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors flex items-center"
                >
                  <FaDownload className="mr-2" /> Download
                </button>
              </div>
            </div>
            <div className="bg-gray-50 p-4 rounded-lg border">
              <p className="text-sm">
                <strong>Scanned:</strong> {results.scanned}
              </p>
              <p className="text-sm">
                <strong>Type:</strong> {results.type}
              </p>
              <p className="text-sm">
                <strong>Timestamp:</strong> {new Date(results.timestamp).toLocaleString()}
              </p>
              <div className="mt-4">
                <h3 className="text-sm font-medium text-gray-700">
                  Vulnerabilities Found: {filteredVulnerabilities.length}
                </h3>
                {filteredVulnerabilities.length > 0 ? (
                  <ul className="mt-2 space-y-3">
                    {filteredVulnerabilities.map((vuln, index) => (
                      <li
                        key={index}
                        className="p-3 bg-white rounded-md shadow-sm border"
                      >
                        <p
                          className={`font-medium ${
                            vuln.severity === "Critical"
                              ? "text-red-600"
                              : vuln.severity === "High"
                              ? "text-orange-600"
                              : vuln.severity === "Medium"
                              ? "text-yellow-600"
                              : "text-gray-600"
                          }`}
                        >
                          {vuln.issue} ({vuln.severity})
                        </p>
                        <p className="text-sm text-gray-600 mt-1">{vuln.details}</p>
                      </li>
                    ))}
                  </ul>
                ) : (
                  <p className="text-green-600 mt-2 text-sm">
                    No vulnerabilities detected (within simulation limits) for selected severity
                  </p>
                )}
              </div>
            </div>
          </div>
        )}

        {/* Features */}
        <div className="mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
          <h3 className="font-semibold text-blue-700 mb-2">Features</h3>
          <ul className="list-disc list-inside text-blue-600 text-sm space-y-1">
            <li>Scan URLs, text, or code snippets</li>
            <li>Checks for security headers, XSS, sensitive data, and code issues</li>
            <li>Severity filter for vulnerabilities</li>
            <li>Copy results to clipboard or download as PNG</li>
            <li>Real-time feedback with loading states</li>
          </ul>
        </div>

       
      </div>
    </div>
  );
};

export default VulnerabilityScanner;